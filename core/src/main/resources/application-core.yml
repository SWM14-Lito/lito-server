chat-gpt:
  api-key: ${CHAT_GPT_API_KEY}
  model: ${CHAT_GPT_MODEL}
  role: ${CHAT_GPT_ROLE}

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    s3:
      bucket: ${S3_BUCKET}
      file-path: ${S3_FILEPATH}
    region:
      static: ${S3_REGION}
    stack:
      auto: false

jwt:
  secret: ${SECRET_KEY}
  access-expiration-time: ${ACCESS_EXPIRED_TIME}
  refresh-expiration-time: ${REFRESH_EXPIRED_TIME}
  refresh-valid-time: ${REFRESH_VALID_TIME}

---
spring:
  config:
    activate:
      on-profile: test

  data:
    redis:
      host: localhost
      port: 6379

  datasource:
    url: jdbc:h2:mem:~/lito;MODE=MySQL;NON_KEYWORDS=USER
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        show_sql: true
        format_sql: true

  sql:
    init:
      mode: never

chat-gpt:
  api-key: key
  model: model
  role: role

cloud:
  aws:
    credentials:
      access-key: access
      secret-key: secret
    s3:
      bucket: bucket
      file-path: path
    region:
      static: region
    stack:
      auto: false

jwt:
  secret: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
  access-expiration-time: 1000000
  refresh-expiration-time: 10000000
  refresh-valid-time: 10000

de:
  flapdoodle:
    mongodb:
      embedded:
        version: 6.0.6
---
spring:
  config:
    activate:
      on-profile: local
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

    mongodb:
      uri: ${MONGO_DB_URI}

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        show_sql: true
        format_sql: true
    defer-datasource-initialization: true

  sql:
    init:
      mode: always
---
spring:
  config:
    activate:
      on-profile: dev

  data:
    redis:
      cluster:
        nodes: ${DEV_REDIS_CLUSTER}

    mongodb:
      uri: ${DEV_MONGO_DB_URI}

  datasource:
    primary:
      hikari:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: ${DEV_DB_URL}
        username: ${DEV_DB_USERNAME}
        password: ${DEV_DB_PASSWORD}

    secondary:
      hikari:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: ${DEV_DB_REPLICATION_URL}
        username: ${DEV_DB_USERNAME}
        password: ${DEV_DB_PASSWORD}

  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        show_sql: false
        format_sql: false
  sql:
    init:
      mode: never